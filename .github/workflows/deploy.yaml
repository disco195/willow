name: Continuous Deployment

on:
  push:
    branches:
      - deploy

jobs:
  #
  #
  build:
    name: Build and deploy docker images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        run: |
          git clone "https://github.com/${{ github.repository }}"
          cd ./willow/
          BRANCH=$(echo ${{ github.ref }} | cut -d / -f 3)
          git switch ${BRANCH}

      - name: Build docker images
        run: |
          cd ./willow/
          cd ./api/
          docker image build --pull --no-cache --tag willow-api .
          cd ../client/
          docker image build --pull --no-cache --tag willow-client .
          cd ../tracers/java/
          docker image build --pull --no-cache --tag willow-tracer-java .
          cd ../python/
          docker image build --pull --no-cache --tag willow-tracer-python .
          cd ../

      - name: Deploy images to github registry
        run: |
          USERNAME=$(echo ${{ github.repository }} | cut -d / -f 1)
          docker login --username ${USERNAME} --password ${{ github.token }} docker.pkg.github.com
          docker image tag willow-api docker.pkg.github.com/${{ github.repository }}/willow-api
          docker image tag willow-client docker.pkg.github.com/${{ github.repository }}/willow-client
          docker image tag willow-tracer-java docker.pkg.github.com/${{ github.repository }}/willow-tracer-java
          docker image tag willow-tracer-python docker.pkg.github.com/${{ github.repository }}/willow-tracer-python
          docker image ls
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-api
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-client
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-tracer-java
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-tracer-python
  #
  #
  deploy:
    name: Deploy to google cloud
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Login into gcloud
        run: |
          echo ${{ secrets.SERVICE_ACCOUNT_KEY }} | base64 --decode > ./key.json
          gcloud auth activate-service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }} --key-file ./key.json
          gcloud config set project ${{ secrets.PROJECT }}
          gcloud config set compute/zone ${{ secrets.COMPUTE_ZONE }}

      - name: Create compute instances
        run: |
          if [ ${{ secrets.VM_RESET }} == 'true' ]
          then
              gcloud --quiet compute instances delete ${{ secrets.VM_NAME }} \
              || true
          fi

          # TODO Database instance manually deployed (make it automatic)

          gcloud compute firewall-rules create allow-api  \
            --action=ALLOW --direction=INGRESS --rules=tcp:8000 --target-tags=api-server \
            || true

          gcloud compute instances create \
              ${{ secrets.VM_NAME }} \
              --machine-type ${{ secrets.VM_TYPE }} \
              --tags http-server,https-server,api-server \
              --image-project cos-cloud --image-family cos-stable \
              --boot-disk-size 10GB \
              || true

      - name: Checkout repository
        run: |
          git clone "https://github.com/${{ github.repository }}"
          cd ./willow/
          BRANCH=$(echo ${{ github.ref }} | cut -d '/' -f 3)
          git switch ${BRANCH}

      - name: Run deploy script on compute instance
        run: |
          USERNAME=$(echo ${{ github.repository }} | cut -d '/' -f 1)
          cat ./willow/.github/deploy.sh |
          sed "s/\${1}/${USERNAME}/" |
          sed "s/\${2}/${{ github.token }}/" |
          sed "s%\${3}%${{ github.repository }}%" |
          sed "s%\${4}%${{ secrets.AUTHENTICATION_CLIENT_ID }}%" |
          sed "s%\${5}%${{ secrets.AUTHENTICATION_CLIENT_SECRET }}%" |
          sed "s%\${6}%${{ secrets.API_URL }}%" |
          sed "s%\${7}%${{ secrets.CLIENT_URL }}%" |
          sed "s%\${8}%${{ secrets.DATABASE_URL }}%" |
          tee ./deploy_filled.sh
          gcloud --quiet compute ssh ${{ secrets.VM_NAME }} -- "sh -c $(cat ./deploy_filled.sh)"
