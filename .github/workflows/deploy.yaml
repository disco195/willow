name: Continuous Deployment

on:
  push:
    branches:
      - deploy

jobs:
  #
  #
  build:
    name: Build and deploy docker images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: deploy

      - name: Build docker images
        run: |
          docker image build --pull --no-cache --tag willow-api -- ./api/
          docker image build --pull --no-cache --tag willow-client -- ./client/
          docker image build --pull --no-cache --tag willow-tracer-java -- ./tracers/java/
          docker image build --pull --no-cache --tag willow-tracer-python -- ./tracers/python/

      - name: Deploy images to github registry
        run: |
          USERNAME=$(echo ${{ github.repository }} | cut -d / -f 1)
          docker login --username ${USERNAME} --password ${{ github.token }} docker.pkg.github.com
          docker image tag willow-api docker.pkg.github.com/${{ github.repository }}/willow-api
          docker image tag willow-client docker.pkg.github.com/${{ github.repository }}/willow-client
          docker image tag willow-tracer-java docker.pkg.github.com/${{ github.repository }}/willow-tracer-java
          docker image tag willow-tracer-python docker.pkg.github.com/${{ github.repository }}/willow-tracer-python
          docker image ls
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-api
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-client
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-tracer-java
          docker image push docker.pkg.github.com/${{ github.repository }}/willow-tracer-python
  #
  #
  deploy:
    name: Deploy to google cloud
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: deploy

      - name: Setup gcloud
        run: |
          echo ${{ secrets.GCLOUD_SETUP_SERVICE_ACCOUNT_KEY }} | base64 --decode > ./key.json
          gcloud auth activate-service-account ${{ secrets.GCLOUD_SETUP_SERVICE_ACCOUNT_EMAIL }} --key-file ./key.json
          gcloud config set project ${{ secrets.GCLOUD_SETUP_PROJECT }}
          gcloud config set compute/zone ${{ secrets.GCLOUD_SETUP_COMPUTE_ZONE }}

      - name: Configure firewall rules
        run: |
          gcloud compute firewall-rules create allow-api \
              --action=ALLOW --direction=INGRESS --rules=tcp:8000 --target-tags=api-server \
              || true

      - name: Configure database compute instance
        run: |
          if [ ${{ secrets.GCLOUD_DATABASE_INSTANCE_RESET }} == 'true' ] # reset the instance wipes all user data
          then
              gcloud --quiet compute instances delete ${{ secrets.GCLOUD_DATABASE_INSTANCE_NAME }} \
                  || true
          fi
          gcloud compute instances create-with-container \
              ${{ secrets.GCLOUD_DATABASE_INSTANCE_NAME }} \
              --machine-type ${{ secrets.GCLOUD_DATABASE_INSTANCE_TYPE }} \
              --image-project cos-cloud --image-family cos-stable \
              --boot-disk-type pd-ssd --boot-disk-size ${{ secrets.GCLOUD_DATABASE_INSTANCE_CAPACITY }} \
              --container-image mongo:latest --container-restart-policy always \
              --container-mount-host-path mount-path=/data/db/,host-path=/home/mongo/db,mode=rw \
              --container-arg='mongod' --container-arg='--dbpath=/data/db/' \
              || true

      - name: Configure server compute instance
        run: |
          if [ ${{ secrets.GCLOUD_SERVER_INSTANCE_RESET }} == 'true' ]
          then
              gcloud --quiet compute instances delete ${{ secrets.GCLOUD_SERVER_INSTANCE_NAME }} \
                  || true
          fi
          gcloud compute instances create \
              ${{ secrets.GCLOUD_SERVER_INSTANCE_NAME }} \
              --machine-type ${{ secrets.GCLOUD_SERVER_INSTANCE_TYPE }} \
              --tags http-server,https-server,api-server \
              --image-project cos-cloud --image-family cos-stable \
              --boot-disk-size 10GB \
              || true

      - name: Run deploy script on server compute instance
        run: |
          USERNAME=$(echo ${{ github.repository }} | cut -d '/' -f 1)
          INTERNAL_DATABASE_IP=$(
              gcloud compute instances describe ${{ secrets.GCLOUD_DATABASE_INSTANCE_NAME }} \
                  --format 'get(networkInterfaces[0].networkIP)'
          )
          EXTERNAL_DATABASE_IP=$(
              gcloud compute instances describe ${{ secrets.GCLOUD_DATABASE_INSTANCE_NAME }} \
                  --format 'get(networkInterfaces[0].accessConfigs[0].natIP)'
          )
          DATABASE_URL="mongodb://${INTERNAL_DATABASE_IP}:27017"
          cat ./.github/deploy.sh |
          sed "s/\${1}/${USERNAME}/" |
          sed "s/\${2}/${{ github.token }}/" |
          sed "s%\${3}%${{ github.repository }}%" |
          sed "s%\${4}%${{ secrets.GCLOUD_CREDENTIALS_AUTHENTICATION_CLIENT_ID }}%" |
          sed "s%\${5}%${{ secrets.GCLOUD_CREDENTIALS_AUTHENTICATION_CLIENT_SECRET }}%" |
          sed "s%\${6}%${{ secrets.API_URL }}%" |
          sed "s%\${7}%${DATABASE_URL}%" |
          tee ./deploy_filled.sh
          gcloud --quiet compute ssh ${{ secrets.GCLOUD_SERVER_INSTANCE_NAME }} -- "sh -c $(cat ./deploy_filled.sh)"
