/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Base schema for trace requests and results
 */
export type Schema = Trace | Result
/**
 * Represents programs values. They shall be one of the following ones. Types like boolean, null, or integers larger than what a double can fit (+- 2 ** 53 - 1) must use string representation.
 */
export type Value = number | string | string[]

/**
 * Traces are the requests to be sent to tracers processes. Traces must have a source to be executed and may have some input. The steps field defines the maximum number of steps to inspect.
 */
export interface Trace {
    source?: string
    input?: string
    steps?: number
}
/**
 * Results store a list of all computed steps of a program.
 */
export interface Result {
    steps: Step[]
}
/**
 * Steps store the results of inspections of the traced program. They shall contain at least one of the snapshot or threw fields and may have 0 or more prints.
 */
export interface Step {
    snapshot?: Snapshot
    threw?: Threw
    prints?: string[]
}
/**
 * Snapshots contains the memory of a program. They store theyselves type, if the program ended, any exception raised, the current stack/heap of the program.
 */
export interface Snapshot {
    type: 'line' | 'call' | 'return' | 'exception'
    stack: Scope[]
    heap: {
        [k: string]: Obj
    }
}
/**
 * Scopes store its name, the line it starts and declared variables.
 */
export interface Scope {
    line: number
    name: string
    variables: Variable[]
}
/**
 * Variables are user created references to values.
 */
export interface Variable {
    name: string
    value: Value
}
/**
 * Objects in the heap of a program
 */
export interface Obj {
    type: 'array' | 'tuple' | 'alist' | 'llist' | 'map' | 'set' | 'other'
    languageType: string
    userDefined: boolean
    members: Member[]
}
/**
 * Members of objects have a key and value which are Value.
 */
export interface Member {
    key: Value
    value: Value
}
/**
 * Contains any exception generated by the tracer program or the traced code compilation, it never happens for traced code exceptions. It also can be a 'cause' problem, usually a constraint of the tracer that does not cause any program exceptions, for example not enough program input or max steps. Threw messages are usually terminal (they stop the tracer program).
 */
export interface Threw {
    exception?: Exception
    cause?: string
}
/**
 * Exceptions may be from tracer or traced program. They shall contain the exception type, it's creation arguments and traceback.
 */
export interface Exception {
    type: string
    args: string[]
    traceback: string[]
}
