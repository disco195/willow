syntax = "proto3";

/*
Protocol for Tracer steps.
*/

/*
Steps store the results of inspections of the traced program.
They shall contain at least one of the snapshot or threw fieds and may have
0 or more prints.
*/
message Step {
  Snapshot snapshot = 1;
  Threw threw = 2;
  repeated string prints = 3;
}

/*
Snapshots contains the memory of a program.
They store theyselves type, if the program ended, any exception raised, the
current stack/heap of the program.
*/
message Snapshot {

  /*
  Types of Snapshots.
  */
  enum Type {
    LINE = 0;   // Normal line
    CALL = 1;   // Creation of a new scope (it must be already in the stack)
    RETURN = 2; // Drop of the current scope (it still has to be in the stack)
    EXCEPTION = 3; // Same as normal line but with a raised exception
                   //(scope drops must go in a new snapshot)
  }

  Snapshot.Type type = 1;
  bool finish = 2;
  Exception exception = 3;
  repeated Scope stack = 4;
  map<string, Obj> heap = 5;
}

/*
Exceptions may be from tracer or traced program.
They shall contain the exception type, it's creation arguments and traceback.
*/
message Exception {
  string type = 1;
  repeated string args = 2;
  repeated string traceback = 3;
}

/*
Scopes store its name, the line it starts and declared variables.
*/
message Scope {
  int32 line = 1;
  string name = 2;
  repeated Variable variables = 3;
}

/*
Varaibles are user created references to values.
*/
message Variable {
  string name = 1;
  Value value = 2;
}

/*
Represents the programs values.
They shall be one of the folowing ones.
*/
message Value {
  oneof value {
    bool boolean = 1;
    int32 integer = 2;
    double float = 3;
    string string = 4;
    string other = 5;
    string reference = 6;
  }
}

/*
Every Obj must have its generic type, a languge type, if its type was defined
in the traced program and a list of members.
Obj members may have values with references to another objects that must also
be in the heap.
*/
message Obj {
  /*
  Types of heap objects.
  */
  enum Type {
    ARRAY = 0;
    TUPLE = 1;
    ALIST = 2;
    LLIST = 3;
    HMAP = 4;
    TMAP = 5;
    SET = 6;
    OTHER = 7;
  }

  Obj.Type type = 1;
  string languageType = 2;
  bool userDefined = 3;
  repeated Member members = 4;
}

/*
Members of objects have a key and value which are Value.
*/
message Member {
  Value key = 1;
  Value value = 2;
}

/*
Contains any exception generated by the tracer program, ou the traced code
compilation, not possible traced code exceptions. It also can be a cause
problem, usually a constraint of the tracer that does not cause any program
exceptions, for example not enough program input or max steps. Threw messages
are usually terminal (they stop the tracer program).
*/
message Threw {
  Exception exception = 1;
  string cause = 2;
}
