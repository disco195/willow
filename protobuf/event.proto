syntax = "proto3";

// Events generated by the tracers.
message Event {
  message Created {}  // Indicates successfull creation.
  message Started {}  // Indicates successfull compilation and initialization
  message Inspected { // Contains the data obtained from the state inspection.
    Frame frame = 1;
  }
  message Printed { // Contains print messages from the reaced code.
    string value = 1;
  }
  message Locked { // Contains lock causes from the traced code.
    string cause = 1;
  }
  message Threw { // Contains any error generated by the tracer.
    enum Source { // The source of the error.
      TRACER = 0;
      TRACED = 1;
    }
    Source source = 1;
    bool terminal = 2;
    Exception excetiion = 3;
  }
  oneof event {
    Event.Created created = 1;
    Event.Started started = 2;
    Event.Inspected inspected = 3;
    Event.Printed printed = 4;
    Event.Locked locked = 5;
    Event.Threw threw = 6;
  }
}

// Exceptions with the object type, any provided arguments and traceback lines.
message Exception {
  string type = 1;
  repeated string args = 2;
  repeated string traceback = 3;
}

// Contains the memory inspection result.
message Frame {
  enum Type { // Types of frame objects.
    LINE = 0;
    CALL = 1;
    RETURN = 2;
    EXCEPTION = 3;
  }
  message Value { // Represents any value or a reference to the heap.
    oneof value {
      bool booleanValue = 1;
      int64 integerValue = 2;
      double floatValue = 3;
      string stringValue = 4;
      int64 reference = 5;
    }
  }
  message Stack {   // The stack information scopes.
    message Scope { // Scopes call lines, names and references.
      int32 line = 1;
      string name = 2;
      repeated string referencesOrder = 3;
      map<string, Frame.Value> references = 4;
    }
    repeated Frame.Stack.Scope scopes = 1;
  }
  message Heap {  // Heap objects references.
    message Obj { // Object value with its type and members.
      enum Type {
        ARRAY = 0;
        TUPLE = 1;
        ALIST = 2;
        LLIST = 3;
        HMAP = 4;
        TMAP = 5;
        SET = 6;
        OTHER = 7;
      }
      message Member { // A member of a object.
        Frame.Value key = 1;
        Frame.Value value = 2;
      }
      Frame.Heap.Obj.Type type = 1;
      string lType = 2;
      bool userDefined = 3;
      repeated Frame.Heap.Obj.Member members = 4;
    }
    map<int64, Frame.Heap.Obj> references = 3;
  }
  Frame.Type type = 1;
  int32 line = 2;
  bool finish = 3;
  Exception exception = 4;
  Frame.Stack stack = 5;
  Frame.Heap heap = 6;
}
